1. ParÃªnteses ()
Como jÃ¡ mencionado, pastas com parÃªnteses sÃ£o ignoradas no caminho da URL. SÃ£o Ãºteis para organizaÃ§Ã£o de arquivos sem afetar a estrutura de rotas.

Exemplo:

app/
â”œâ”€â”€ (admin)/
â”‚   â”œâ”€â”€ dashboard/
â”‚   â”‚   â””â”€â”€ page.tsx
URL resultante: /dashboard (o nome (admin) nÃ£o aparece na URL).

2. Colchetes [] (Rota dinÃ¢mica)
Os colchetes sÃ£o usados para criar rotas dinÃ¢micas, permitindo parÃ¢metros nas URLs.

Exemplo:

app/
â”œâ”€â”€ product/
â”‚   â”œâ”€â”€ [id]/
â”‚   â”‚   â””â”€â”€ page.tsx
URL: /product/123
ParÃ¢metro disponÃ­vel no arquivo: params.id (via props do App Router).
3. Dois colchetes [[...]] (Rota catch-all e opcional)
Dois colchetes sÃ£o usados para capturar rotas dinÃ¢micas opcionais e catch-all.

Catch-all (obrigatÃ³rio)
app/
â”œâ”€â”€ blog/
â”‚   â”œâ”€â”€ [...slug]/
â”‚   â”‚   â””â”€â”€ page.tsx
URLs: /blog/post-1, /blog/category/post-2
ParÃ¢metro: params.slug (array contendo o restante do caminho).
Opcional
app/
â”œâ”€â”€ docs/
â”‚   â”œâ”€â”€ [[...slug]]/
â”‚   â”‚   â””â”€â”€ page.tsx
URLs: /docs, /docs/getting-started, /docs/api/auth
ParÃ¢metro: params.slug (array ou undefined se for apenas /docs).
4. Prefixo @ (Routing groups)
O @ pode ser usado em combinaÃ§Ã£o com parÃªnteses para criar grupos de rotas reutilizÃ¡veis. Esses grupos permitem que vocÃª aplique diferentes layouts ou funcionalidades para subconjuntos de rotas.

Exemplo:

app/
â”œâ”€â”€ (marketing)@marketing/
â”‚   â”œâ”€â”€ layout.tsx
â”‚   â””â”€â”€ home/
â”‚       â””â”€â”€ page.tsx
â”œâ”€â”€ (dashboard)@dashboard/
â”‚   â”œâ”€â”€ layout.tsx
â”‚   â””â”€â”€ analytics/
â”‚       â””â”€â”€ page.tsx
Aqui, @marketing e @dashboard sÃ£o aliases de grupo, permitindo reutilizaÃ§Ã£o em vÃ¡rias combinaÃ§Ãµes de layouts.
5. default (Rota padrÃ£o em layouts ou pastas segmentadas)
O arquivo chamado default.tsx Ã© usado para renderizar um conteÃºdo padrÃ£o em layouts segmentados ou quando nÃ£o hÃ¡ rota correspondente.

Exemplo:

app/
â”œâ”€â”€ about/
â”‚   â”œâ”€â”€ page.tsx
â”‚   â”œâ”€â”€ team/
â”‚   â”‚   â”œâ”€â”€ page.tsx
â”‚   â”‚   â””â”€â”€ default.tsx
URL /about/team: Se nÃ£o existir uma pÃ¡gina correspondente, o Next.js renderiza default.tsx.
6. page.tsx, layout.tsx, error.tsx, loading.tsx, e not-found.tsx
Esses nomes tÃªm significados especÃ­ficos no App Router:

page.tsx: Define o conteÃºdo principal de uma rota (renderiza quando a rota Ã© acessada).
layout.tsx: Define o layout persistente que envolve os filhos (Ãºtil para cabeÃ§alhos, rodapÃ©s, etc.).
error.tsx: Renderiza quando hÃ¡ um erro na rota ou nos filhos.
loading.tsx: Renderiza durante carregamento (quando suspense ou fetch sÃ£o usados).
not-found.tsx: Renderiza quando a rota nÃ£o Ã© encontrada (404 personalizado).
7. Arquivo middleware.ts
O arquivo middleware.ts Ã© usado para interceptar requisiÃ§Ãµes e modificar comportamentos antes que elas cheguem Ã  rota.

Exemplo:

src/
â”œâ”€â”€ middleware.ts
Uso comum:

Redirecionamentos
AutenticaÃ§Ã£o
Controle de acesso
Resumo das ConvenÃ§Ãµes:
Caractere/Arquivo	FunÃ§Ã£o
()	Ignorar nome no caminho e organizar rotas
[]	Rota dinÃ¢mica
[[...]]	Rota dinÃ¢mica catch-all e opcional
@	Routing groups (combinar layouts reutilizÃ¡veis)
default.tsx	ConteÃºdo padrÃ£o em uma rota segmentada
page.tsx	PÃ¡gina principal da rota
layout.tsx	Layout persistente para as rotas-filhas
error.tsx	PÃ¡gina para exibir erros
loading.tsx	Feedback de carregamento
not-found.tsx	PÃ¡gina para rotas nÃ£o encontradas
Se precisar de mais detalhes ou exemplos sobre algum deles, Ã© sÃ³ avisar! ğŸ˜Š